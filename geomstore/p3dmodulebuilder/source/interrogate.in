1546806430
3 3
9 geomstore 4 Kshb 9 geomstore 
41
25 12 get_position 0 20 66 20 Vertex::get_position 0 0 40
getter for LVecBase3f *Vertex::position;
45
LVecBase3f *Vertex::get_position(void) const;

26 12 set_position 0 36 66 20 Vertex::set_position 0 0 40
setter for LVecBase3f *Vertex::position;
45
void Vertex::set_position(LVecBase3f *value);

27 9 get_color 0 20 66 17 Vertex::get_color 0 0 46
getter for UnalignedLVecBase4f *Vertex::color;
51
UnalignedLVecBase4f *Vertex::get_color(void) const;

28 9 set_color 0 36 66 17 Vertex::set_color 0 0 46
setter for UnalignedLVecBase4f *Vertex::color;
51
void Vertex::set_color(UnalignedLVecBase4f *value);

29 10 get_normal 0 20 66 18 Vertex::get_normal 0 0 37
getter for LVecBase3f Vertex::normal;
42
LVecBase3f Vertex::get_normal(void) const;

30 6 get_id 0 20 66 14 Vertex::get_id 0 0 26
getter for int Vertex::id;
31
int Vertex::get_id(void) const;

31 6 set_id 0 36 66 14 Vertex::set_id 0 0 26
setter for int Vertex::id;
31
void Vertex::set_id(int value);

32 12 get_neighbor 0 20 66 20 Vertex::get_neighbor 0 0 52
getter for std::vector< Vertex * > Vertex::neighbor;
57
std::vector< Vertex * > Vertex::get_neighbor(void) const;

33 8 get_face 0 20 66 16 Vertex::get_face 0 0 50
getter for std::vector< Triangle * > Vertex::face;
55
std::vector< Triangle * > Vertex::get_face(void) const;

34 11 get_objdist 0 20 66 19 Vertex::get_objdist 0 0 33
getter for float Vertex::objdist;
38
float Vertex::get_objdist(void) const;

35 11 set_objdist 0 36 66 19 Vertex::set_objdist 0 0 33
setter for float Vertex::objdist;
38
void Vertex::set_objdist(float value);

36 12 get_collapse 0 20 66 20 Vertex::get_collapse 0 0 36
getter for Vertex *Vertex::collapse;
41
Vertex *Vertex::get_collapse(void) const;

37 12 set_collapse 0 36 66 20 Vertex::set_collapse 0 0 36
setter for Vertex *Vertex::collapse;
41
void Vertex::set_collapse(Vertex *value);

38 6 Vertex 0 4 66 14 Vertex::Vertex 0 2 1 2 225
// candidate vertex for collapse

/**
 * Simple representation of a vertex in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */
112
Vertex::Vertex(LVecBase3f *v, UnalignedLVecBase4f *c, int _id);
inline Vertex::Vertex(Vertex const &) = default;

39 7 ~Vertex 0 6 66 15 Vertex::~Vertex 0 0 0
30
virtual Vertex::~Vertex(void);

40 22 remove_if_non_neighbor 0 4 66 30 Vertex::remove_if_non_neighbor 0 1 3 0
47
void Vertex::remove_if_non_neighbor(Vertex *n);

41 8 Triangle 0 4 76 18 Triangle::Triangle 0 2 4 5 193
/**
 * Simple representation of a triangle in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */
110
Triangle::Triangle(Vertex *v0, Vertex *v1, Vertex *v2);
inline Triangle::Triangle(Triangle const &) = default;

42 9 ~Triangle 0 6 76 19 Triangle::~Triangle 0 0 0
34
virtual Triangle::~Triangle(void);

43 10 get_vertex 0 20 76 20 Triangle::get_vertex 0 0 39
getter for Vertex *Triangle::vertex[3];
42
Vertex **Triangle::get_vertex(void) const;

44 10 set_vertex 0 36 76 20 Triangle::set_vertex 0 0 39
setter for Vertex *Triangle::vertex[3];
44
void Triangle::set_vertex(Vertex *value[3]);

45 10 get_normal 0 20 76 20 Triangle::get_normal 0 0 39
getter for LVecBase3f Triangle::normal;
44
LVecBase3f Triangle::get_normal(void) const;

46 14 compute_normal 0 4 76 24 Triangle::compute_normal 0 1 6 38
// unit vector orthogonal to this face
36
void Triangle::compute_normal(void);

47 14 replace_vertex 0 4 76 24 Triangle::replace_vertex 0 1 7 0
60
void Triangle::replace_vertex(Vertex *v_old, Vertex *v_new);

48 10 has_vertex 0 4 76 20 Triangle::has_vertex 0 1 8 0
36
int Triangle::has_vertex(Vertex *v);

49 9 GeomStore 0 4 78 20 GeomStore::GeomStore 0 2 9 10 0
85
GeomStore::GeomStore(void);
inline GeomStore::GeomStore(GeomStore const &) = default;

50 10 ~GeomStore 0 4 78 21 GeomStore::~GeomStore 0 0 0
28
GeomStore::~GeomStore(void);

51 14 print_vertices 0 4 78 25 GeomStore::print_vertices 0 1 11 0
37
void GeomStore::print_vertices(void);

52 12 print_colors 0 4 78 23 GeomStore::print_colors 0 1 12 0
35
void GeomStore::print_colors(void);

53 15 print_triangles 0 4 78 26 GeomStore::print_triangles 0 1 13 0
38
void GeomStore::print_triangles(void);

54 10 add_vertex 0 4 78 21 GeomStore::add_vertex 0 1 14 0
54
int GeomStore::add_vertex(LVecBase3f v, LVecBase4f c);

55 12 add_triangle 0 4 78 23 GeomStore::add_triangle 0 1 15 0
52
int GeomStore::add_triangle(int v0, int v1, int v2);

56 19 subdivide_triangles 0 4 78 30 GeomStore::subdivide_triangles 0 1 16 0
43
void GeomStore::subdivide_triangles(int s);

57 28 subdivide_triangles_distance 0 4 78 39 GeomStore::subdivide_triangles_distance 0 1 17 0
54
void GeomStore::subdivide_triangles_distance(float d);

58 6 extend 0 4 78 17 GeomStore::extend 0 1 18 140
/**
 * Extend this GeomStore with all Vertices and Triangles from other while
 * leaving other intact (New objects are being generated!)
 */
41
void GeomStore::extend(GeomStore *other);

59 10 operator + 0 4 78 21 GeomStore::operator + 0 2 19 20 0
76
int GeomStore::operator +(float v);
int GeomStore::operator +(LVecBase3f v);

60 10 operator - 0 4 78 21 GeomStore::operator - 0 2 21 22 0
76
int GeomStore::operator -(float v);
int GeomStore::operator -(LVecBase3f v);

61 10 operator * 0 4 78 21 GeomStore::operator * 0 1 23 0
35
int GeomStore::operator *(float v);

62 10 operator / 0 4 78 21 GeomStore::operator / 0 1 24 0
35
int GeomStore::operator /(float v);

63 20 get_vertex_positions 0 20 78 31 GeomStore::get_vertex_positions 0 0 55
getter for PTA_LVecBase3f GeomStore::_vertex_positions;
59
PTA_LVecBase3f GeomStore::get_vertex_positions(void) const;

64 10 get_colors 0 20 78 21 GeomStore::get_colors 0 0 45
getter for PTA_LVecBase4f GeomStore::_colors;
49
PTA_LVecBase4f GeomStore::get_colors(void) const;

65 20 get_triangle_indices 0 20 78 31 GeomStore::get_triangle_indices 0 0 55
getter for PTA_LVecBase3i GeomStore::_triangle_indices;
59
PTA_LVecBase3i GeomStore::get_triangle_indices(void) const;

24
1 0 0 7 32 75 39 0 191 /**
 * Simple representation of a vertex in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */ 3 1 v 1 67  1 c 1 69  3 _id 1 71  
2 0 0 7 32 75 39 0 0 1 6 param0 0 85  
3 0 0 4 34 87 0 0 0 2 4 this 3 75  1 n 1 75  
4 0 0 7 36 90 42 0 0 1 6 param0 0 88  
5 0 0 7 36 90 42 0 193 /**
 * Simple representation of a triangle in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */ 3 2 v0 1 75  2 v1 1 75  2 v2 1 75  
6 0 0 4 44 87 0 0 38 // unit vector orthogonal to this face 1 4 this 3 90  
7 0 0 4 45 87 0 0 0 3 4 this 3 90  5 v_old 1 75  5 v_new 1 75  
8 0 0 6 46 71 0 0 0 2 4 this 3 90  1 v 1 75  
9 0 0 7 48 91 50 0 0 0 
10 0 0 7 48 91 50 0 0 1 6 param0 0 92  
11 0 0 4 50 87 0 0 0 1 4 this 3 91  
12 0 0 4 51 87 0 0 0 1 4 this 3 91  
13 0 0 4 52 87 0 0 0 1 4 this 3 91  
14 0 0 6 53 71 0 0 0 3 4 this 3 91  1 v 1 67  1 c 1 94  
15 0 0 6 54 71 0 0 0 4 4 this 3 91  2 v0 1 71  2 v1 1 71  2 v2 1 71  
16 0 0 4 55 87 0 0 0 2 4 this 3 91  1 s 1 71  
17 0 0 4 56 87 0 0 0 2 4 this 3 91  1 d 1 74  
18 0 0 4 57 87 0 0 140 /**
 * Extend this GeomStore with all Vertices and Triangles from other while
 * leaving other intact (New objects are being generated!)
 */ 2 4 this 3 91  5 other 1 91  
19 0 0 6 58 71 0 0 0 2 4 this 3 91  1 v 1 67  
20 0 0 6 58 71 0 0 0 2 4 this 3 91  1 v 1 74  
21 0 0 6 59 71 0 0 0 2 4 this 3 91  1 v 1 67  
22 0 0 6 59 71 0 0 0 2 4 this 3 91  1 v 1 74  
23 0 0 6 60 71 0 0 0 2 4 this 3 91  1 v 1 74  
24 0 0 6 61 71 0 0 0 2 4 this 3 91  1 v 1 74  
30
66 6 Vertex 0 26625 6 Vertex 6 Vertex 0 0 0 1 38 39 8 96 97 98 99 100 101 102 103 1 40 0 0 0 0 0 191
/**
 * Simple representation of a vertex in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */

67 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 68 0 0 0 0 0 0 0 0 0 0

68 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

69 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 70 0 0 0 0 0 0 0 0 0 0

70 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

71 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

72 18 vector< Vertex * > 0 2048 23 std::vector< Vertex * > 23 std::vector< Vertex * > 0 0 0 0 0 0 0 0 0 0 0 0 0

73 20 vector< Triangle * > 0 2048 25 std::vector< Triangle * > 25 std::vector< Triangle * > 0 0 0 0 0 0 0 0 0 0 0 0 0

74 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

75 8 Vertex * 0 8576 8 Vertex * 8 Vertex * 0 0 66 0 0 0 0 0 0 0 0 0 0

76 8 Triangle 0 26625 8 Triangle 8 Triangle 0 0 0 1 41 42 2 104 105 3 46 47 48 0 0 0 0 0 193
/**
 * Simple representation of a triangle in a mesh with 
 * useful functions for edge collapse based on 
 * 
 * Progressive Mesh type Polygon Reduction Algorithm
 * by Stan Melax (c) 1998
 */

77 11 Vertex *[3] 0 4202496 11 Vertex *[3] 11 Vertex *[3] 0 0 75 3 0 0 0 0 0 0 0 0 0 0

78 9 GeomStore 0 26625 9 GeomStore 9 GeomStore 0 0 0 1 49 50 3 106 107 108 12 51 52 53 54 55 56 57 58 59 60 61 62 0 0 0 0 0 0

79 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 80 0 0 0 0 0 0 0 0 0 0

80 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

81 14 PTA_LVecBase4f 0 2105344 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 82 0 0 0 0 0 0 0 0 0 0

82 37 PointerToArray< UnalignedLVecBase4f > 0 2048 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

83 14 PTA_LVecBase3i 0 2105344 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 84 0 0 0 0 0 0 0 0 0 0

84 28 PointerToArray< LVecBase3i > 0 2048 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 0 0 0 0 0 0 0 0 0 0

85 14 Vertex const * 0 8576 14 Vertex const * 14 Vertex const * 0 0 86 0 0 0 0 0 0 0 0 0 0

86 12 Vertex const 0 8832 12 Vertex const 12 Vertex const 0 0 66 0 0 0 0 0 0 0 0 0 0

87 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

88 16 Triangle const * 0 8576 16 Triangle const * 16 Triangle const * 0 0 89 0 0 0 0 0 0 0 0 0 0

89 14 Triangle const 0 8832 14 Triangle const 14 Triangle const 0 0 76 0 0 0 0 0 0 0 0 0 0

90 10 Triangle * 0 8576 10 Triangle * 10 Triangle * 0 0 76 0 0 0 0 0 0 0 0 0 0

91 11 GeomStore * 0 8576 11 GeomStore * 11 GeomStore * 0 0 78 0 0 0 0 0 0 0 0 0 0

92 17 GeomStore const * 0 8576 17 GeomStore const * 17 GeomStore const * 0 0 93 0 0 0 0 0 0 0 0 0 0

93 15 GeomStore const 0 8832 15 GeomStore const 15 GeomStore const 0 0 78 0 0 0 0 0 0 0 0 0 0

94 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 95 0 0 0 0 0 0 0 0 0 0

95 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

0
13
96 8 position 0 6 67 25 26 0 0 0 0 0 0 16 Vertex::position 39
// location of point in euclidean space

97 5 color 0 6 69 27 28 0 0 0 0 0 0 13 Vertex::color 15
// vertex color

98 6 normal 0 2 68 29 0 0 0 0 0 0 0 14 Vertex::normal 39
// location of point in euclidean space

99 2 id 0 6 71 30 31 0 0 0 0 0 0 10 Vertex::id 36
// place of vertex in original Array

100 8 neighbor 0 2 72 32 0 0 0 0 0 0 0 16 Vertex::neighbor 20
// adjacent vertices

101 4 face 0 2 73 33 0 0 0 0 0 0 0 12 Vertex::face 21
// adjacent triangles

102 7 objdist 0 6 74 34 35 0 0 0 0 0 0 15 Vertex::objdist 33
// cached cost of collapsing edge

103 8 collapse 0 6 75 36 37 0 0 0 0 0 0 16 Vertex::collapse 32
// candidate vertex for collapse

104 6 vertex 0 6 77 43 44 0 0 0 0 0 0 16 Triangle::vertex 34
// the 3 points that make this tri

105 6 normal 0 2 68 45 0 0 0 0 0 0 0 16 Triangle::normal 38
// unit vector orthogonal to this face

106 17 _vertex_positions 0 2 79 63 0 0 0 0 0 0 0 28 GeomStore::_vertex_positions 0

107 7 _colors 0 2 81 64 0 0 0 0 0 0 0 18 GeomStore::_colors 0

108 17 _triangle_indices 0 2 83 65 0 0 0 0 0 0 0 28 GeomStore::_triangle_indices 0

0
